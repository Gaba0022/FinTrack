Projeto: FinTrack – Monitor de Ativos com Alertas em Tempo Real

Descrição:
Um dashboard web que exibe cotações de ações, criptomoedas e índices em tempo real e permite que o usuário configure alertas personalizados. Quando o preço atingir o valor definido, o sistema envia notificações automáticas via WhatsApp (Twilio API).

Objetivos do Projeto:

* Mostrar cotações em tempo real (Alpha Vantage API).
* Exibir histórico de preços em gráficos (Chart.js ou D3.js).
* Permitir configuração de alertas de preço para ativos.
* Enviar notificações automáticas quando alertas forem acionados.
* Extra: exportar histórico de ativos em PDF/CSV.
* Extra: autenticação simples para salvar alertas por usuário.

Tecnologias:

* Backend: .NET 8 (C#)
* Frontend: React
* Banco de Dados: MySQL
* Integrações Externas:

  * API de mercado financeiro (Alpha Vantage)
  * API de mensagens (WhatsApp via Twilio)
* Infraestrutura: Azure
* Containerização: Docker + Docker Compose (backend, frontend, MySQL, Adminer)

Tempo de Produção:

* Projeto completo em 1 semana (MVP funcional)

Cronograma (1 semana, detalhado por dia):

* Dia 1: Configuração do backend e Docker inicial

  * Criar projeto backend em .NET 8
  * Configurar ambiente de desenvolvimento
  * Testar conexão com Alpha Vantage API
  * Criar endpoints básicos para consultar ativos
  * Criar Dockerfile do backend e configurar serviço no docker-compose

* Dia 2: Criação do dashboard básico no frontend

  * Estruturar layout da aplicação web com React
  * Listagem de ativos e exibição de preços em tabelas
  * Testar integração com backend para mostrar dados reais
  * Criar Dockerfile do frontend e configurar serviço no docker-compose

* Dia 3: Integração com WhatsApp e banco de dados

  * Configurar Twilio API para envio de mensagens
  * Criar lógica para disparar alertas quando preço atingir limite definido
  * Testar envio de mensagens para casos de exemplo
  * Configurar container do MySQL no docker-compose com volumes persistentes
  * Adicionar Adminer para gerenciar banco via container

* Dia 4: Implementação de gráficos históricos e indicadores técnicos básicos

  * Adicionar gráficos de linha para histórico de preços
  * Implementar cálculos de média móvel e variação percentual
  * Integrar gráficos com dados reais do backend

* Dia 5: Persistência de dados de alertas e usuários

  * Configurar banco de dados MySQL
  * Criar tabelas para usuários, ativos, alertas e notificações
  * Implementar CRUD de alertas
  * Validar integração backend ↔ banco no ambiente Docker

* Dia 6: Sistema de login/autenticação e exportação de relatórios

  * Implementar login simples (JWT ou sessão)
  * Permitir que cada usuário salve seus alertas
  * Implementar exportação de histórico em PDF/CSV

* Dia 7: Melhorias rápidas no frontend e deploy

  * Ajustes de UI/UX no dashboard
  * Testar responsividade e performance
  * Preparar ambiente para deploy em nuvem (Azure) com containers
